# Prompt Completo para Criar API Backend de Loja FiveM

**IMPORTANTE: Crie APENAS o backend/API REST. NÃO crie interfaces frontend, dashboards ou páginas web.**

Desenvolva uma API REST robusta para loja de jogos FiveM com sistema de pagamentos PIX (EfiBank), gerenciamento de usuários, sistema de carrinho e integração instantânea com o servidor. A API deve ser deployment-ready no Replit e retornar apenas JSON.

## 📋 ESTRUTURA DO PROJETO

```
fivem-store-api/
├── src/
│   ├── controllers/
│   │   ├── authController.js
│   │   ├── userController.js
│   │   ├── productController.js
│   │   ├── cartController.js
│   │   ├── paymentController.js
│   │   ├── webhookController.js
│   │   ├── adminController.js
│   │   └── serverController.js
│   ├── middleware/
│   │   ├── auth.js
│   │   ├── validation.js
│   │   ├── rateLimiter.js
│   │   └── errorHandler.js
│   ├── models/
│   │   ├── User.js
│   │   ├── Product.js
│   │   ├── Transaction.js
│   │   ├── Cart.js
│   │   └── Grant.js
│   ├── routes/
│   │   ├── auth.js
│   │   ├── users.js
│   │   ├── products.js
│   │   ├── cart.js
│   │   ├── payments.js
│   │   ├── webhooks.js
│   │   ├── admin.js
│   │   └── server.js
│   ├── services/
│   │   ├── efiService.js
│   │   ├── databaseService.js
│   │   ├── fivemService.js
│   │   └── emailService.js
│   ├── utils/
│   │   ├── logger.js
│   │   ├── crypto.js
│   │   └── validators.js
│   ├── config/
│   │   ├── database.js
│   │   ├── efibank.js
│   │   └── server.js
│   └── app.js
├── tests/
│   ├── auth.test.js
│   ├── users.test.js
│   ├── products.test.js
│   ├── cart.test.js
│   ├── payments.test.js
│   └── admin.test.js
├── docs/
│   ├── API.md
│   └── SETUP.md
├── scripts/
│   ├── seed.js
│   ├── migrate.js
│   └── test-all.sh
├── .env.example
├── package.json
├── server.js
└── README.md
```

## 🗄️ ESTRUTURA DO BANCO DE DADOS

**Tabelas necessárias (SQLite para Replit):**

```sql
-- Usuários do sistema
CREATE TABLE users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username VARCHAR(50) UNIQUE NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    role ENUM('user', 'admin', 'super_admin') DEFAULT 'user',
    fivem_identifier VARCHAR(100),
    discord_id VARCHAR(50),
    coins INTEGER DEFAULT 0,
    vip_level VARCHAR(20) DEFAULT 'none',
    vip_expires DATETIME NULL,
    banned BOOLEAN DEFAULT FALSE,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Produtos da loja
CREATE TABLE products (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    code VARCHAR(50) UNIQUE NOT NULL,
    name VARCHAR(100) NOT NULL,
    description TEXT,
    price DECIMAL(10,2) NOT NULL,
    type ENUM('coins', 'vip', 'vehicle', 'weapon', 'item') NOT NULL,
    data JSON, -- Dados específicos do produto
    active BOOLEAN DEFAULT TRUE,
    stock INTEGER DEFAULT -1, -- -1 = ilimitado
    category VARCHAR(50),
    image_url VARCHAR(255),
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Carrinho de compras
CREATE TABLE cart_items (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    product_id INTEGER NOT NULL,
    quantity INTEGER NOT NULL DEFAULT 1,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (product_id) REFERENCES products(id)
);

-- Transações de pagamento
CREATE TABLE transactions (
    id VARCHAR(36) PRIMARY KEY,
    user_id INTEGER NOT NULL,
    payment_id VARCHAR(100),
    amount DECIMAL(10,2) NOT NULL,
    currency VARCHAR(3) DEFAULT 'BRL',
    status ENUM('pending', 'approved', 'cancelled', 'failed') DEFAULT 'pending',
    payment_method VARCHAR(20) DEFAULT 'pix',
    qr_code TEXT,
    expires_at DATETIME,
    products JSON, -- Produtos comprados
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id)
);

-- Entregas/concessões
CREATE TABLE grants (
    id VARCHAR(36) PRIMARY KEY,
    transaction_id VARCHAR(36),
    user_id INTEGER NOT NULL,
    grant_type VARCHAR(20) NOT NULL,
    grant_data JSON,
    status ENUM('pending', 'delivered', 'failed') DEFAULT 'pending',
    granted_by INTEGER, -- admin user id
    granted_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (granted_by) REFERENCES users(id)
);

-- Logs do sistema
CREATE TABLE activity_logs (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    action VARCHAR(50) NOT NULL,
    details JSON,
    ip_address VARCHAR(45),
    user_agent TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id)
);
```

## 🚀 ESPECIFICAÇÕES DA API

### **AUTENTICAÇÃO E USUÁRIOS**

```javascript
// POST /api/auth/register - Registrar usuário
{
  "username": "player123",
  "email": "player@email.com",
  "password": "senha123",
  "fivem_identifier": "steam:110000103fa1337",
  "discord_id": "123456789012345678"
}

// POST /api/auth/login - Login
{
  "email": "player@email.com",
  "password": "senha123"
}

// GET /api/auth/me - Dados do usuário logado
// PUT /api/auth/me - Atualizar dados do usuário
// POST /api/auth/change-password - Alterar senha

// GET /api/users/:id - Dados públicos do usuário
// GET /api/users/search?q=username - Buscar usuários
```

### **PRODUTOS E LOJA**

```javascript
// GET /api/products - Listar produtos (com filtros)
// GET /api/products/:id - Detalhes do produto
// GET /api/products/categories - Listar categorias
// GET /api/products/featured - Produtos em destaque

// ADMIN endpoints:
// POST /api/admin/products - Criar produto
// PUT /api/admin/products/:id - Atualizar produto
// DELETE /api/admin/products/:id - Remover produto
```

### **SISTEMA DE CARRINHO**

```javascript
// GET /api/cart - Ver carrinho do usuário logado
// POST /api/cart/add - Adicionar produto
{
  "product_id": 1,
  "quantity": 2
}

// PUT /api/cart/item/:id - Atualizar quantidade
// DELETE /api/cart/item/:id - Remover item
// DELETE /api/cart/clear - Limpar carrinho
// GET /api/cart/stats - Estatísticas do carrinho
// POST /api/cart/checkout - Finalizar compra
```

### **PAGAMENTOS E WEBHOOKS**

```javascript
// POST /api/payments/create - Criar pagamento
{
  "items": [{"product_id": 1, "quantity": 2}],
  "payment_method": "pix"
}

// GET /api/payments/:id - Status do pagamento
// POST /api/webhooks/efibank - Webhook EfiBank
// POST /api/webhooks/payment - Webhook genérico
```

### **ADMINISTRAÇÃO**

```javascript
// GET /api/admin/users - Listar usuários
// PUT /api/admin/users/:id/ban - Banir usuário
// PUT /api/admin/users/:id/unban - Desbanir usuário
// POST /api/admin/users/:id/grant - Conceder itens

// GET /api/admin/transactions - Todas transações
// GET /api/admin/analytics - Relatórios
// GET /api/admin/logs - Logs do sistema

// POST /api/admin/grant - Concessão manual
{
  "user_id": 1,
  "grant_type": "coins",
  "grant_data": {"amount": 1000},
  "reason": "Compensação por bug"
}
```

### **INTEGRAÇÃO FIVEM**

```javascript
// POST /api/server/deliver - Entrega instantânea
{
  "user_identifier": "steam:110000103fa1337",
  "grant_type": "coins",
  "grant_data": {"amount": 1000},
  "transaction_id": "uuid"
}

// GET /api/server/user/:identifier/online - Verificar se está online
// POST /api/server/user/:identifier/kick - Expulsar usuário
// GET /api/server/status - Status do servidor FiveM
```

## 📦 DEPENDÊNCIAS (package.json)

```json
{
  "name": "fivem-store-api",
  "version": "2.0.0",
  "description": "API completa para loja FiveM com pagamentos PIX",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "test": "jest",
    "test:watch": "jest --watch",
    "migrate": "node scripts/migrate.js",
    "seed": "node scripts/seed.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "express-rate-limit": "^6.7.0",
    "helmet": "^6.1.5",
    "cors": "^2.8.5",
    "morgan": "^1.10.0",
    "bcryptjs": "^2.4.3",
    "jsonwebtoken": "^9.0.0",
    "zod": "^3.21.4",
    "sqlite3": "^5.1.6",
    "uuid": "^9.0.0",
    "axios": "^1.4.0",
    "multer": "^1.4.5",
    "sharp": "^0.32.1",
    "nodemailer": "^6.9.1",
    "qrcode": "^1.5.3",
    "dotenv": "^16.0.3",
    "winston": "^3.8.2"
  },
  "devDependencies": {
    "nodemon": "^2.0.22",
    "jest": "^29.5.0",
    "supertest": "^6.3.3"
  }
}
```

## 🔐 VARIÁVEIS DE AMBIENTE (.env.example)

```env
# Servidor
NODE_ENV=development
PORT=3000
HOST=0.0.0.0

# JWT
JWT_SECRET=sua-chave-jwt-super-secreta-aqui
JWT_EXPIRES_IN=7d

# Banco de dados
DATABASE_URL=./database.sqlite

# EfiBank
EFI_CLIENT_ID=seu-client-id-efibank
EFI_CLIENT_SECRET=seu-client-secret-efibank
EFI_PIX_KEY=sua-chave-pix
EFI_WEBHOOK_URL=https://sua-url.replit.app/api/webhooks/efibank
EFI_WEBHOOK_SECRET=seu-token-webhook-secreto

# FiveM Server
FIVEM_SERVER_URL=http://seu-servidor-fivem:30120
FIVEM_SERVER_TOKEN=token-do-seu-servidor-fivem

# Admin
SUPER_ADMIN_EMAIL=admin@sua-loja.com
SUPER_ADMIN_PASSWORD=senha-admin-segura

# Email (opcional)
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=seu-email@gmail.com
SMTP_PASS=sua-senha-app

# Rate Limiting
RATE_LIMIT_WINDOW=15
RATE_LIMIT_MAX=100
```

## 🛡️ RECURSOS DE SEGURANÇA OBRIGATÓRIOS

1. **Autenticação JWT** com refresh tokens
2. **Rate limiting** em todos os endpoints
3. **Validação de dados** com Zod
4. **Hash de senhas** com bcrypt
5. **Headers de segurança** com Helmet
6. **CORS** configurado
7. **Logs de atividade** completos
8. **Sanitização de dados**
9. **Prevenção de SQL injection**
10. **Middleware de erro** robusto

## 🧪 SISTEMA DE TESTES

Inclua testes automatizados para:

- ✅ Autenticação (register, login, JWT)
- ✅ CRUD de usuários
- ✅ CRUD de produtos
- ✅ Sistema de carrinho
- ✅ Pagamentos e webhooks
- ✅ Endpoints administrativos
- ✅ Integração FiveM
- ✅ Rate limiting
- ✅ Validações
- ✅ Casos de erro

## 🔧 RECURSOS ESPECÍFICOS DO FIVEM

### **Entrega Instantânea de Itens:**

```javascript
// Detectar quando usuário está online
// Entregar coins, VIP, veículos automaticamente
// Log de todas as entregas
// Retry automático se jogador estiver offline
// Webhook para confirmar entrega no servidor
```

### **Tipos de Produtos Suportados:**

1. **Coins** - Moeda do servidor
2. **VIP** - Diferentes níveis (Bronze, Prata, Ouro, Diamante)
3. **Veículos** - Spawn direto na garagem
4. **Armas** - Entrega no inventário
5. **Items** - Items customizados do servidor
6. **Properties** - Casas/empresas
7. **Jobs** - Empregos especiais

## 📊 ENDPOINTS DE RELATÓRIOS (JSON APENAS)

```javascript
// GET /api/admin/analytics/sales - Vendas por período
// GET /api/admin/analytics/products - Produtos mais vendidos  
// GET /api/admin/analytics/users - Usuários mais ativos
// GET /api/admin/analytics/revenue - Revenue analytics
// GET /api/admin/analytics/conversions - Conversão de pagamentos
// GET /api/admin/logs/errors - Logs de erro
```

## 🚀 DEPLOY NO REPLIT

Configure para funcionar imediatamente no Replit:

1. **Auto-inicialização** do banco de dados
2. **Migração automática** das tabelas
3. **Seed de dados** inicial
4. **Health check** endpoint
5. **Configuração de ambiente** automática
6. **Keep-alive** para evitar sleep
7. **HTTPS** ready

## 📖 DOCUMENTAÇÃO AUTOMÁTICA DA API

Configure endpoints de documentação:

```javascript
// GET /api/docs - Documentação Swagger/OpenAPI
// GET /api/health - Health check com status da API
// GET /api/version - Versão da API
// GET /api/endpoints - Lista todos endpoints disponíveis
```

Inclua:
- Swagger/OpenAPI spec
- Exemplos de request/response JSON
- Códigos de erro
- Autenticação required
- Rate limits por endpoint

## 🎯 REQUISITOS FINAIS

A API deve ser:

- ✅ **Plug-and-play** no Replit
- ✅ **Escalável** e bem estruturada
- ✅ **Segura** com todas as práticas de segurança
- ✅ **Testável** com suite completa de testes
- ✅ **Documentada** com exemplos claros
- ✅ **Monitorável** com logs estruturados
- ✅ **Integrável** com qualquer servidor FiveM
- ✅ **Robusta** com tratamento de erros completo

**IMPORTANTE**: 

1. **APENAS BACKEND/API** - NÃO crie páginas HTML, dashboards visuais, ou interfaces frontend
2. **APENAS ENDPOINTS JSON** - Todos os retornos devem ser em formato JSON
3. **API REST PURA** - Foque exclusivamente nos endpoints REST
4. **SEM VIEWS/TEMPLATES** - Não inclua engines de template ou renderização de páginas
5. **DOCUMENTAÇÃO VIA API** - Use Swagger/OpenAPI acessível via endpoint JSON

Implemente TODOS os endpoints listados, com validação completa, tratamento de erros, logs, e testes. A API deve estar 100% funcional para uso em produção imediatamente após o deploy no Replit.

Faça o código mais limpo, organizado e profissional possível. Use as melhores práticas de desenvolvimento Node.js/Express para APIs REST.